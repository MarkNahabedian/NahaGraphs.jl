var documenterSearchIndex = {"docs":
[{"location":"#NahaGraphs.jl","page":"Home","title":"NahaGraphs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NahaGraphs provides some rudimentary functionality for building directed graphs and running GraphViz dot to visualize them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The query function provides a simplemined way to search the graph's edges.","category":"page"},{"location":"#Generic-Graph-definitions","page":"Home","title":"Generic Graph definitions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DiGraph\nadd_edge!\nremove_edge!\nnodes\nedges\nquery","category":"page"},{"location":"#NahaGraphs.DiGraph","page":"Home","title":"NahaGraphs.DiGraph","text":"DiGraph represents a directed graph.\n\nAny Julia object can serve as the node of a DiGraph so long as it has identity.\n\nUse add_edge! of a from node and a to node to add an edge (and those nodes if not already present) to a DiGraph.\n\nThe nodes, edges and query functions can be used to examine the DiGraph.\n\n\n\n\n\n","category":"type"},{"location":"#NahaGraphs.add_edge!","page":"Home","title":"NahaGraphs.add_edge!","text":"add_edge!(graph, from, to)\nadd_edge!(::DiGraph, ::Pair)\n\nAdd an edge to the DiGraph going between the specified nodes. The graph is returned.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.remove_edge!","page":"Home","title":"NahaGraphs.remove_edge!","text":"remove_edge!(graph, from, to)\nremove_edge!(::DiGraph, ::Pair)\n\nRemove the edge of the DiGraph going between the specified nodes. The graph is returned.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.nodes","page":"Home","title":"NahaGraphs.nodes","text":"nodes(graph)\n\nReturn a collection of all of the nodes of graph.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.edges","page":"Home","title":"NahaGraphs.edges","text":"edges(graph)\n\nReturn a collection of all of the edges of graph. Each element of the collections is a Pair associating one nodeof the graph with another.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.query","page":"Home","title":"NahaGraphs.query","text":"query(::DiGraph, from, to)\n\nReturn the Set of edges that match the query. from and to can be objects or types, so, for example, query(graph, Number, :a) returns all of the edges that go from any Number to the Symbol :a.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"To define your own graph type that delegates to DiGraph, see test/mygraph.jl.  You might do this in order to streamline how nodes and edges are managed for your application.","category":"page"},{"location":"#Transforming-Graphs","page":"Home","title":"Transforming Graphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is experimental.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the \"transformingGraph! and applyRule!\" testset for an example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"applyRule!\ntransformingGraph!\nNahaGraphs.NonlocalReturn\ntransform!","category":"page"},{"location":"#NahaGraphs.applyRule!","page":"Home","title":"NahaGraphs.applyRule!","text":"applyRule!(graph, rule)\n\nApply rule to each node of graph and modify the graph's edges as determined by rule.  Rule is a function that takes the graph and a node as arguments and returns the set of edges to add and the set of edges to remove.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.transformingGraph!","page":"Home","title":"NahaGraphs.transformingGraph!","text":"transformingGraph!(f)\n\nCalls f with three arguments:\n\na check function of one argument which will perform a    non-local return if that argument is false;\n\nan add function which is used to collect edges that should   be added to a graph;\n\na remove function used to accumulate edges that should be   removed from a graph.\n\ntransformingGraph! returns the accumulated add and remove edge sets for its caller to act on.  These sets can be passed to transform! along with the graph to perform those modifications on the graph. See applyRule!.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.NonlocalReturn","page":"Home","title":"NahaGraphs.NonlocalReturn","text":"NonlocalReturn is a type of exception that allows us to use throw and catch to implement nonlocal return to a more distant stack frame.\n\nUsage:\n\nbegin\n    exittag = NonlocalReturn()\n    # An example recursive function which might need to return\n    # to this context from across many stack frames:\n    function f()\n        if rand(1:5) == 1\n            throw(exitrtag)\n        end\n        f()\n        f()\n    end\n    try\n\tf()\n    catch e\n\tif e != exittag\n\t    rethrow(e)\n\tend\n    end\n    # f has done a non-local return\nend\n\n\n\n\n\n","category":"type"},{"location":"#NahaGraphs.transform!","page":"Home","title":"NahaGraphs.transform!","text":"transform!(graph, addarcs, removearcs)\n\nRemove the removearcs from graph then add the addarcs to graph, then \n\n\n\n\n\n","category":"function"},{"location":"#Definitions-Specific-to-GraphViz-dot","page":"Home","title":"Definitions Specific to GraphViz dot","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the \"rundot output file type\" testset for an example of how to construct a graph and render it in SVG.","category":"page"},{"location":"","page":"Home","title":"Home","text":"dotgraph\ndotID\ndotnode\ndotedge\ngraph_attributes\nnode_attributes\nedge_attributes\ndotescape\ndiarc","category":"page"},{"location":"#NahaGraphs.dotgraph","page":"Home","title":"NahaGraphs.dotgraph","text":"dotgraph(path::String, graph, dotstyle)\n\nWrite the graph to the specified file. If the file extension is dot then a GraphViz dot file is written. Otherwise a dot description of graph is piped through the dot command, the output of which will be written to psth.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.dotID","page":"Home","title":"NahaGraphs.dotID","text":"dotID(node)\n\nReturn a string to be used as the id of node in a GraphViz dot file.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.dotnode","page":"Home","title":"NahaGraphs.dotnode","text":"dotnode(io::IO, graph, dotstyle, node)\n\nWrite a Dot node statement to io describing node.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.dotedge","page":"Home","title":"NahaGraphs.dotedge","text":"dotedge(io::IO, graph, dotstyle, from, to)\n\nWrite a Dot edge statement to io describing an edge from from to to.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.graph_attributes","page":"Home","title":"NahaGraphs.graph_attributes","text":"graph_attributes(dotstyle)\n\nReturn a Dict of graph level attributes (for the Dot graph statement).\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.node_attributes","page":"Home","title":"NahaGraphs.node_attributes","text":"node_attributes(dotstyle)\n\nReturn a Dict of the default node attributes that should apply to all nodes of graph.\n\n\n\n\n\nnode_attributes(dotstyle, node)\n\nReturn a Dict of the Dot attributes to be used when rendering node.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.edge_attributes","page":"Home","title":"NahaGraphs.edge_attributes","text":"edge_attributes(dotstyle)\n\nReturn a Dict of the default attributes that should apply to all edges of graph.\n\n\n\n\n\nedge_attributes(dotstyle, from, to)\n\nReturn a Dict of the Dot attributes to be used when rendering the edge running from from to to, which are both nodes.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.dotescape","page":"Home","title":"NahaGraphs.dotescape","text":"dotescape(::AbstractString)::AbstractString\n\nEscape an ID in the GraphViz Dot language.  'ID' is the fundamental token in Dot.\n\n\n\n\n\n","category":"function"},{"location":"#NahaGraphs.diarc","page":"Home","title":"NahaGraphs.diarc","text":"diark is a convenience function for dotedge methods to call.\n\n\n\n\n\n","category":"function"}]
}
